// Code generated by go-bindata.
// sources:
// sound/noise.wav
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _soundNoiseWav = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x00\x18\x02\xe7\xfd\x52\x49\x46\x46\x10\x02\x00\x00\x57\x41\x56\x45\x66\x6d\x74\x20\x10\x00\x00\x00\x01\x00\x01\x00\x44\xac\x00\x00\x88\x58\x01\x00\x02\x00\x10\x00\x64\x61\x74\x61\xec\x01\x00\x00\xff\xf9\xdb\xfc\x92\x04\x9f\x0a\xa3\x08\x1d\xff\xe4\xf4\xb7\xf0\x74\xf4\x39\xfd\x53\x06\xe9\x0a\xe6\x07\x4d\xfe\x6d\xf4\x08\xf2\x3f\xfa\xdc\x08\x80\x15\xcc\x19\x76\x14\xdd\x08\x8a\xfc\xb4\xf4\xbe\xf3\x03\xf8\x45\xfd\x32\x00\x8c\x00\x30\x00\x5e\x00\x43\x01\xd0\x02\x2e\x05\x93\x07\x6c\x07\x7a\x02\xe1\xf9\x78\xf2\xab\xf1\x5b\xf8\x10\x02\x65\x08\x5c\x08\x4c\x04\x41\x00\x71\xfe\xad\xfe\xbf\x00\x05\x05\xfb\x09\x2e\x0c\x07\x09\x9a\x02\x3e\xfd\xc9\xfb\x7b\xfd\x9e\x00\x1f\x04\x1e\x07\xd1\x08\x3f\x09\x7f\x08\x68\x04\xe1\xf9\xfb\xea\xff\xe0\x05\xe5\x83\xf5\x86\x07\x1a\x12\x7c\x16\x2f\x1b\xce\x21\xd6\x24\x29\x1e\x3a\x0d\xb6\xf7\xaa\xe5\x33\xdd\x3c\xdf\x9f\xe7\x1b\xf2\xf5\xfd\x8f\x0b\xa6\x16\x88\x17\xe4\x0b\xa4\xfc\x38\xf7\x15\x01\x3b\x12\x61\x1b\xda\x10\x33\xf2\xa7\xcb\x6f\xb0\x6e\xb0\x98\xce\xab\xff\x39\x30\x04\x4d\x25\x4a\x15\x29\x21\xfb\x03\xd9\x77\xd2\x0e\xe3\x68\xf8\x1e\x03\xf1\x01\x35\xfe\x2b\x01\x07\x0d\x75\x1d\x89\x2b\x28\x32\xf6\x2f\x7d\x27\xee\x1c\x45\x13\x5e\x0a\xd0\xfe\xc4\xed\x4d\xd9\xf2\xc8\x5a\xc3\x80\xc8\x16\xd4\x40\xe4\x5a\xf9\x3f\x0e\x82\x16\x98\x0a\xdc\xf3\xae\xe5\xec\xe9\xea\xf7\x10\x01\x3d\x01\xf6\xfe\x1d\xff\x5a\xfe\x76\xf7\x86\xeb\xc3\xe1\x82\xe0\x52\xe8\xf5\xf3\x16\xfd\xe9\x01\xca\x06\x11\x11\x0a\x1f\xae\x27\xda\x23\x39\x17\x37\x0d\x1b\x0d\xe0\x12\x86\x14\xed\x0c\xfe\x00\xc9\xf9\xc2\xfb\x69\x02\x22\x05\x45\xff\x9b\xf3\xf3\xe8\x7d\xe3\x81\xe2\x79\xe2\xe7\xe0\x93\xdd\x95\xda\x03\xda\x4f\xdc\x00\xdf\x0e\xe0\x6d\xe0\x99\xe3\x03\xeb\x9f\xf4\xd4\xfd\x37\x06\xf1\x0c\x50\x0e\x6e\x07\x19\xfc\x8a\xf5\x4c\xf9\xd4\x03\x64\x0d\xc7\x12\xdc\x15\x46\x18\xcb\x17\x4f\x12\xca\x09\x11\x04\x25\x06\xa2\x10\xa7\x1e\x19\x28\x7e\x26\xa1\x19\xe6\x07\xbf\xf8\xcd\xef\x63\xec\xb8\xec\xdd\xee\xc3\xef\x11\xec\xe2\xe3\xd8\xdb\xe6\xd8\x11\xdb\x22\xde\x1a\xdf\x8a\xdf\xb7\xe2\xa8\xe8\xf2\xed\x8d\xef\xf2\xed\xc0\xeb\x93\xea\xfc\xe9\x11\xe9\x04\xe8\x00\xe8\x3c\xea\x1b\xef\xc8\xf5\x8b\xfc\xb0\x01\xfc\x04\x01\x07\xae\x07\xad\x05\xe0\x00\xd0\xfb\x28\xfa\x7f\xfc\x01\x00\x00\xff\xff\x6d\x0f\x74\xe2\x18\x02\x00\x00")

func soundNoiseWavBytes() ([]byte, error) {
	return bindataRead(
		_soundNoiseWav,
		"sound/noise.wav",
	)
}

func soundNoiseWav() (*asset, error) {
	bytes, err := soundNoiseWavBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sound/noise.wav", size: 536, mode: os.FileMode(420), modTime: time.Unix(1454406586, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sound/noise.wav": soundNoiseWav,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sound": &bintree{nil, map[string]*bintree{
		"noise.wav": &bintree{soundNoiseWav, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
